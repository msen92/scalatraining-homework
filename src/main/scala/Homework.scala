import java.util.Date
import scala.io.Source
import scala.util.Try

object Homework {
  case class Movie(
                    id: Int,
                    title: String,
                    year: Option[Int],
                    genres: List[String]
                  )

  case class Rating(
                     userId: Int,
                     movieId: Int,
                     rating: Double,
                     ts: Date
                   )

  case class Tag(
                  userId: Int,
                  movieId:Int,
                  tag:String,
                  timestamp:Date
                )

  def parseRating(line: String): Rating = line.split(',').toList match {
    case userId :: movieId :: rating :: ts :: Nil =>
      Rating(
        userId.toInt,
        movieId.toInt,
        rating.toDouble,
        new Date(ts.toLong * 1000)
      )
  }

  def parseTag(line:String) : Tag = line.split(',').toList match {
    case userId :: movieId :: tag :: timestamp :: Nil =>
      Tag(
        userId.toInt,
        movieId.toInt,
        tag,
        new Date(timestamp.toLong * 1000)
      )
  }

  def parseMovie(line: String): Movie = {
    val splitted = line.split(",", 2)

    val id = splitted(0).toInt
    val remaining = splitted(1)
    val sp = remaining.lastIndexOf(",")
    val titleDirty = remaining.substring(0, sp)
    val title =
      if (titleDirty.startsWith("\"")) titleDirty.drop(1).init else titleDirty   // Filmin Adi

    val year = Try(
      title
        .substring(title.lastIndexOf("("), title.lastIndexOf(")"))
        .drop(1)
        .toInt
    ).toOption
    val genres = remaining.substring(sp + 1).split('|').toList
    Movie(id, title, year, genres)
  }

  def findListElementInclusion(firstList: List[Int], secondList: List[Int]): (Int, Int) = {
    var foundElement = 0
    firstList.foreach{i =>
      if (secondList.filter(j => j == i).length >= 1)
        foundElement += 1
    }
    (foundElement,firstList.length)
  }

  def main(args: Array[String]): Unit = {
    // DatalarÄ±n okunmasÄ±
    val projectRootPath = new java.io.File(".").getCanonicalPath

    val movieLines =
      Source.fromFile(s"${projectRootPath}/data/movies.csv").getLines().toList.drop(1)
    val ratingLines =
      Source.fromFile(s"${projectRootPath}/data/ratings.csv").getLines().toList.drop(1)
    val tagLines =
      Source.fromFile(s"${projectRootPath}/data/tags.csv").getLines().toList.drop(1)

    // Csvlerin case classlara dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmesi
    val parsedMovies = movieLines.map(parseMovie)
    val parsedRatings = ratingLines.map(parseRating)
    val parsedTags = tagLines.map(parseTag)

    /*
    * Ã‡Ã¶zÃ¼m 1
    * YÄ±llara ve tÃ¼rlere (genre) gÃ¶re film sayÄ±larÄ± nedir?
    * Ã–rnek: (1985 korku filmi x adet, aksiyon filmi y adet, 1986 korku filmi xâ€™ adet, aksiyon filmi yâ€™ adet gibi)
    */

    // TÃ¼r yÄ±l ve film id'sinin tutulduÄŸu flat edilmiÅŸ liste
    val genreYearMovieIdTuple = parsedMovies.map(m => m.genres.map(g => (g,m.year.getOrElse(0),m.id))).flatMap(i => i)

    // Sadece tÃ¼r ve yÄ±llardan oluÅŸan ve gereksiz datalarÄ±n filtrelendiÄŸi liste
    val genreYearTupleCleansed = genreYearMovieIdTuple
      .map{case (k,v,j) => (k,v)}
      .filter{ case (k,v) => k != "(no genres listed)" &&  k != None && v != 0 }

    println("---------------- Ã‡Ã¶zÃ¼m 1 ---------------- ")
    genreYearTupleCleansed.groupBy(i=>(i._2,i._1))
      .map{case ((k,v),j) => (k,v,j.length)}
      .groupMap(_._1)(m => (m._2,m._3))
      .toList
      .sortBy(_._1)
      .foreach{
        case (k,v) => println(s"------\n${k} yÄ±lÄ±nda:");
          v.foreach{
            case (k,v) => println(s"${v} adet ${k} filmi vardÄ±r.")
          }
      }

    /*
    * Ã‡Ã¶zÃ¼m 2
    * Rating puanlarÄ±na gÃ¶re en fazla yÃ¼ksek puan verilen yÄ±l hangisidir (sinemanÄ±n altÄ±n yÄ±lÄ± ğŸ˜Š)
    */

    // Film id ve rating listesinin olduÄŸu liste
    val movieRatingMap = parsedRatings.map(r => (r.movieId,r.rating)).groupMap(_._1)(_._2)

    // Filmlerin yÄ±llarÄ±nÄ±n ve puanlarÄ±nÄ±n olduÄŸu liste
    val yearRating:List[(Int,List[Double])] = parsedMovies.map(m=>(m.year.getOrElse(0), movieRatingMap.get(m.id).getOrElse(List(0.0d))))

    // Ã‡Ã¶zÃ¼m
    val goldenYearOfCinema = yearRating.groupMap(_._1)(_._2)
      .map{case (k,v) => (k,v.flatMap(i=>i).sum/v.flatMap(i=>i).length.toDouble)}
      .toList
      .sortBy(_._2)
      .reverse
      .head

    println("---------------- Ã‡Ã¶zÃ¼m 2 ---------------- ")
    println(s"SinemanÄ±n altÄ±n yÄ±lÄ± ${goldenYearOfCinema._2} ortalama puan ile ${goldenYearOfCinema._1} yÄ±lÄ±dÄ±r.")

    /*
    * Ã‡Ã¶zÃ¼m 3
    * YÄ±llara gÃ¶re film adedi en dÃ¼ÅŸÃ¼k olan tÃ¼rlerin genel ortalamadaki yeri nedir?
    * Ã–rnek:yÄ±llÄ±k film adedi en dÃ¼ÅŸÃ¼k olan 10 yÄ±lda toplam 13 filmle romantik komedi tÃ¼rÃ¼dÃ¼r ve toplamda xyz adet film arasÄ±nda abc adet Ã§ekilmiÅŸtir
    */

    // Ã‡Ã¶zÃ¼m
    val yearlyLeastProducedCategory =  genreYearTupleCleansed.groupBy(_._1)
      .map{ case(k,v) => (k,v.length,parsedMovies.length) }
      .toList
      .sortBy(_._2)
      .head

    println("---------------- Ã‡Ã¶zÃ¼m 3 ---------------- ")
    println(
      s"Film adedi en dÃ¼ÅŸÃ¼k olan kategori : ${yearlyLeastProducedCategory._1} tÃ¼rÃ¼dÃ¼r ve" +
        s" toplamda ${yearlyLeastProducedCategory._3} film arasÄ±nda ${yearlyLeastProducedCategory._2} " +
        s"adet ${yearlyLeastProducedCategory._1} tÃ¼rÃ¼nde film vardÄ±r"
    )

    /*
    * Ã‡Ã¶zÃ¼m 4
    * TÃ¼rlere gÃ¶re Tag yapan kullanÄ±cÄ±larÄ±n rating puanÄ± verme ortalamasÄ± nedir ve bu oran hangi yÄ±lda peak yapmÄ±ÅŸtÄ±r?
    * Ã–rnek:komedi filmleri iÃ§in tag veren her 10 kiÅŸiden 8â€™i filme puan da vermektedir ve bu oran 2018 yÄ±lÄ±nda %90â€™la peak yapmÄ±ÅŸtÄ±r
    */

    // Her bir film id'ye tag veren userid'lerin listesinin tutulduÄŸu liste
    val movieTaggerUserMap = parsedTags.map(t => (t.movieId,t.userId)).groupMap(_._1)(_._2)

    // Her bir film id'ye oy veren userid'lerin listesinin tutulduÄŸu liste
    val movieVoterUserMap = parsedRatings.map(r => (r.movieId,r.userId)).groupMap(_._1)(_._2)

    // YÄ±l tÃ¼r ve film id'lerin yanÄ±na filme oy ve tag veren user listesinin getirilmesi
    val movieVotersAndTaggers = genreYearMovieIdTuple.map(
      i=>(i._1,i._2,i._3,movieTaggerUserMap.get(i._3).getOrElse(List(0)).toSet.toList,movieVoterUserMap.get(i._3).getOrElse(List(0)))
    ).filter(i => i._3 != List(0) && i._4 != List(0) )

    // YÄ±l ve tÃ¼r bazÄ±nda hem tag hem oy veren user sayÄ±sÄ± ve sadece tag veren user sayÄ±sÄ±nÄ±n tuple listesi olarak olarak gruplandÄ±ÄŸÄ± liste
    val movieVotersAndTaggersGrouped = movieVotersAndTaggers.map(m => (m._1,m._2,findListElementInclusion(m._4,m._5)))
      .groupMap(g => (g._1,g._2))(t => (t._3._1,t._3._2))

    // TuplelarÄ±n toplanarak yÄ±l ve tÃ¼r bazÄ±nda hem tag hem oy veren ve sadece tag veren user sayÄ±sÄ±nÄ±n tutulduÄŸu liste
    val movieVotersAndTaggersFolded = movieVotersAndTaggersGrouped.map(i => (i._1, i._2.foldLeft((0,0))((r,l) => ((r._1 + l._1,r._2 + l._2)))))

    // Sonuca ulaÅŸmak iÃ§in outlier'larÄ±n elenerek en yÃ¼ksek oranÄ±n bulunmasÄ±
    val movieVotersAndTaggersSolution = movieVotersAndTaggersFolded.filter(i => i._2._1 != i._2._2)
      .map{case((k,v),(j,m)) => (k,v,j,m,(j.toDouble/m.toDouble)*100)}
      .toList
      .sortBy(_._3)
      .reverse
      .head

    println("---------------- Ã‡Ã¶zÃ¼m 4 ---------------- ")
    println(s"${movieVotersAndTaggersSolution._2} yÄ±lÄ±nda ${movieVotersAndTaggersSolution._1} filmleri iÃ§in " +
      s"${movieVotersAndTaggersSolution._4} tag veren kiÅŸiden ${movieVotersAndTaggersSolution._3}'si" +
      s" filme puan da vermiÅŸtir. %${movieVotersAndTaggersSolution._5.toInt} oranla bu yÄ±l peak yapÄ±lan yÄ±ldÄ±r.")

    /*
    * Ã‡Ã¶zÃ¼m 5
    * En fazla tag veren kiÅŸinin en sevdiÄŸi ve en sevmediÄŸi tÃ¼rler hangi yÄ±llardadÄ±r?
    * Ã–rnek:519 adet tagâ€™le en fazla tag yapan x idâ€™li kullanÄ±cÄ±nÄ±n en yÃ¼ksek puan verdiÄŸi yÄ±l 1985 yÄ±lÄ± aksiyon filmleridir, en az puan verdiÄŸi yÄ±l 2000 yÄ±lÄ± romantik komedi filmleridir
    */

    // En Ã§ok tag veren user
    val taggerKing = parsedTags.groupBy(_.userId)
      .map{ case(k,v) => (k,v.length)}
      .toList
      .sortBy(_._2)
      .reverse
      .head

    // En Ã§ok tag veren user'Ä±n film id lere verdiÄŸi puanlar
    val ratingsOfTaggerKing = parsedRatings.map(r => (r.userId,r.movieId,r.rating))
      .filter(_._1 == taggerKing._1)
      .map(i => (i._2,i._3))
      .toMap

    // En Ã§ok tag veren user'Ä±n yÄ±l ve tÃ¼rlere gÃ¶re puanlarÄ±nÄ±n gruplanmasÄ±
    val genreYearAndRatings =  genreYearMovieIdTuple.filter(i=> !ratingsOfTaggerKing.get(i._3).isEmpty )
      .map(i=>(i._1,i._2,ratingsOfTaggerKing.get(i._3).getOrElse(0d)))
      .groupMap(i=>(i._1,i._2))(i => i._3)

    // En Ã§ok tag veren user'Ä±n yÄ±l ve tÃ¼rlere gÃ¶re verdiÄŸi oylarÄ±n ortalamalarÄ±(ortalamaya gÃ¶re artan ÅŸekilde sÄ±ralanmÄ±ÅŸ)
    val genreYearAvaragesSorted = genreYearAndRatings.map(i => (i._1._1,i._1._2,i._2.sum/i._2.length.toDouble))
      .toList
      .sortBy(_._3)

    // En Ã§ok ortalama puana sahip yÄ±l ve tÃ¼r
    val mostRatedYearAndGenre = genreYearAvaragesSorted.reverse.head

    // En az ortalama puana sahip yÄ±l ve tÃ¼r
    val leastRatedYearAndGenre = genreYearAvaragesSorted.head

    println("---------------- Ã‡Ã¶zÃ¼m 5 ---------------- ")
    println(s"${taggerKing._2} tag ile ${taggerKing._1} id'li kullanÄ±cÄ±nÄ±n en yÃ¼ksek puan verdiÄŸi yÄ±l" +
      s" ${mostRatedYearAndGenre._2} yÄ±lÄ± ${mostRatedYearAndGenre._1} filmleridir," +
      s" en dÃ¼ÅŸÃ¼k puan verdiÄŸi yÄ±l ${leastRatedYearAndGenre._2} yÄ±lÄ± ${leastRatedYearAndGenre._1} filmleridir."
    )

    /*
    * Ã‡Ã¶zÃ¼m 6
    * TÃ¼rlerine gÃ¶re filmlere Ã¶nce tag yapÄ±lÄ±p sonra mÄ± puan verilmektedir yoksa Ã¶nce puan verilip sonra mÄ± tag yapÄ±lmaktadÄ±r?(burada ilk event tag mi yoksa puan mÄ± bakÄ±lsa yeterli zira tag-puan-tag ÅŸeklinde de gidebilir.)
    */

    // UserlarÄ±n filmlere rating verme timestampleri
    val ratingTimestamps = parsedRatings.map(r => ((r.movieId,r.userId),(r.ts))).toMap

    // UserlarÄ±n filmlere tag yapma timestampleri
    val taggingTimestamps = parsedTags.map(t => ((t.movieId,t.userId),(t.timestamp)))

    // Tagging timestampler ve rating timestamplerin bir araya getirilmesi
    val ratingAndTaggingTimestamps = taggingTimestamps.map(t => (t._1,t._2,ratingTimestamps.get(t._1).getOrElse(t._2)))

    // Ã–nce rating yapÄ±lÄ±p sonrasÄ±nda tagging yapÄ±lanlarÄ±n sayÄ±sÄ±
    val firstRatingThenTaggingCount = ratingAndTaggingTimestamps.filter(i => i._3.compareTo(i._2) < 0).length

    // Ã–nce tagging yapÄ±lÄ±p sonrasÄ±nda rating yapÄ±lanlarÄ±n sayÄ±sÄ±
    val firstTaggingThenRatingCount = ratingAndTaggingTimestamps.filter(i => i._3.compareTo(i._2) > 0).length

    // Tagging yapÄ±lÄ±p rating yapÄ±lmamÄ±ÅŸ olan kayÄ±tlar
    val firstTaggingThenNoRatingCount = ratingAndTaggingTimestamps.filter(i => i._3.compareTo(i._2) == 0).length

    println("---------------- Ã‡Ã¶zÃ¼m 6 ---------------- ")
    println(s"Ã–nce rating yapÄ±lÄ±p sonra tagging yapÄ±lan kayÄ±t sayÄ±sÄ±: ${firstRatingThenTaggingCount}" +
      s"\nÃ–nce tagging yapÄ±lÄ±p sonra rating yapÄ±lan kayÄ±t sayÄ±sÄ±: ${firstTaggingThenRatingCount}" +
      s"\nTagging yapÄ±lÄ±p rating yapÄ±lmamÄ±s kayÄ±t sayÄ±sÄ±: ${firstTaggingThenNoRatingCount}")
    println("-----------------------------------------")
  }
}